name: S3 File Uploader CI/CD

defaults:
  run:
    shell: bash

on:
  push:
    branches:
      - master
    tags:
      - 'v*'

  pull_request:
    branches:
      - master

jobs:

  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-10.15, windows-latest]
        python-version: [3.8, 3.9]
    
    environment:
      name: ${{ matrix.os }}_${{ matrix.python-version }}
    
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
        
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
    
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
      
      - name: Setup FFmpeg
        continue-on-error: true
        uses: FedericoCarboni/setup-ffmpeg@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: BACKUP - Setup ffmpeg and ffprobe
        run: |
          python ffmpeg_setup.py
          echo "./bin" >> $GITHUB_PATH
      
      - name: Run unit tests.
        run: python -m unittest discover -v -s ./tests/unit_tests -p "*_tests.py"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_REGION_NAME: ${{ secrets.AWS_REGION_NAME }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}

      - name: Run integration tests - MainWindow.
        run: python -m unittest -v tests.integration_tests.main_window_tests
      
      - name: Run integration tests - SetupWindow.
        run: python -m tests.integration_tests.setup_window_tests
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_REGION_NAME: ${{ secrets.AWS_REGION_NAME }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}

      - name: Run integration tests - SetupWindow UI.
        run: python -m tests.integration_tests.setup_window_ui_elements_tests
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_REGION_NAME: ${{ secrets.AWS_REGION_NAME }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      
      - name: Run integration tests - UpdateDatabaseWindow.
        run: python -m unittest -v tests.integration_tests.update_database_window_tests

      - name: Run integration tests - MassUploadWindow.
        run: python -m unittest -v tests.integration_tests.mass_upload_window_tests
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_REGION_NAME: ${{ secrets.AWS_REGION_NAME }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}

      - name: Run integration tests - MassUploadWindow UI.
        run: python -m unittest -v tests.integration_tests.mass_upload_window_ui_elements_tests
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_REGION_NAME: ${{ secrets.AWS_REGION_NAME }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}


  build:
    needs: tests

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-10.15, windows-latest]
        python-version: [3.9]

    steps:
      - uses: actions/checkout@v2
  
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
    
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
          
      - name: Install py2app on Mac
        if: matrix.os == 'macos-10.15'
        run: |
          python -m pip install py2app
      
      - name: Build app
        run: |
          if [ -f setup.py ]; then python setup.py clean --full-clean create; else echo "There is no setup.py file."; fi
      
      - name: Distribute created executables
        run: |
          if [ -f setup.py ]; then python setup.py distribute; else echo "There is no setup.py file."; fi

      - name: Check if Windows build created MSI file
        if: matrix.os == 'windows-latest'
        run: |
          if [ -f "$WINDOWS_MSI_FILE_NAME" ]; then echo "MSI file (${WINDOWS_MSI_FILE_NAME}) created successfully."; else exit 1; fi
        env:
          WINDOWS_MSI_FILE_NAME: "distribution/S3_File_Uploader-0.4-windows_amd64.msi"

      - name: Check if Windows build created ZIP file
        if: matrix.os == 'windows-latest'
        run: |
          if [ -f "$WINDOWS_ZIP_FILE_NAME" ]; then echo "ZIP file (${WINDOWS_ZIP_FILE_NAME}) created successfully."; else exit 1; fi
        env:
          WINDOWS_ZIP_FILE_NAME: "distribution/S3_File_Uploader-0.4-windows_amd64.zip"
        
      - name: Check if Mac build created DMG file
        if: matrix.os == 'macos-10.15'
        run: |
          if [ -f "$MAC_DMG_FILE_NAME" ]; then echo "DMG file (${MAC_DMG_FILE_NAME}) created successfully."; else exit 1; fi
        env:
          MAC_DMG_FILE_NAME: "distribution/S3 File Uploader Installer.dmg"

      - name: Check if Mac build created APP bundle
        if: matrix.os == 'macos-10.15'
        run: |
          if [ -f "$MAC_APP_FILE_NAME" ]; then echo "APP bundle (${MAC_APP_FILE_NAME}) created successfully."; else exit 1; fi
        env:
          MAC_APP_FILE_NAME: "distribution/S3 File Uploader.app.zip"
      
      - name: Save distribution files - TESTING
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v2
        with:
          name: distribution-files
          path: distribution
          retention-days: 1


  release:
    needs: build

    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        python-version: [3.9]

    steps:
      - name: Download distribution files
        uses: actions/download-artifact@v2

      - name: Create environment variables for file names
        run: |
          cd distribution-files
          WINDOWS_MSI_FILE_PATH=$(ls -d *.msi)
          WINDOWS_ZIP_FILE_PATH=$(ls -d *windows*.zip)
          MAC_DMG_FILE_PATH=$(ls -d *.dmg)
          MAC_APP_ZIP_FILE_PATH=$(ls -d *.app.zip)

          echo ::set-env name=WINDOWS_MSI_FILE_PATH::${WINDOWS_MSI_FILE_PATH}
          echo ::set-env name=WINDOWS_ZIP_FILE_PATH::${WINDOWS_ZIP_FILE_PATH}
          echo ::set-env name=MAC_DMG_FILE_PATH::${MAC_DMG_FILE_PATH}
          echo ::set-env name=MAC_APP_ZIP_FILE_PATH::${MAC_APP_ZIP_FILE_PATH}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
      
      - name: Upload MSI installer to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./distribution-files/${{ env.WINDOWS_MSI_FILE_PATH }}
          asset_name: ${{ env.WINDOWS_MSI_FILE_PATH }}
          asset_content_type: application/x-msi

      - name: Upload Windows Zip folder to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./distribution-files/${{ env.WINDOWS_ZIP_FILE_PATH }}
          asset_name: ${{ env.WINDOWS_ZIP_FILE_PATH }}
          asset_content_type: application/zip

      - name: Upload DMG installer to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./distribution-files/${{ env.MAC_DMG_FILE_PATH }}
          asset_name: ${{ env.MAC_DMG_FILE_PATH }}
          asset_content_type: application/x-apple-diskimage

      - name: Upload DMG installer to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./distribution-files/${{ env.MAC_APP_ZIP_FILE_PATH }}
          asset_name: ${{ env.MAC_APP_ZIP_FILE_PATH }}
          asset_content_type: application/zip
